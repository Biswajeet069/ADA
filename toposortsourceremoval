#include<stdio.h>

int a[10][10], n, t[10], indegree[10];
int stack[10], top = -1;

// Function to compute the indegree of each node
void computeIndegree(int n, int a[][10]) {
    int i, j, sum = 0;
    for (i = 0; i < n; i++) {
        sum = 0;
        for (j = 0; j < n; j++) {
            sum = sum + a[j][i];  // Count incoming edges for node i
        }
        indegree[i] = sum;  // Store the indegree
    }
}

// Function to perform Topological Sort using Source Removal (Kahnâ€™s Algorithm)
void tps_SourceRemoval(int n, int a[][10]) {
    int i, j, v;
    
    // Push all nodes with indegree 0 into the stack
    for (i = 0; i < n; i++) {
        if (indegree[i] == 0) {
            stack[++top] = i;
        }
    }
    
    int k = 0;  // Index for topological order
    while (top != -1) {
        v = stack[top--];  // Pop from stack
        t[k++] = v;        // Add node to topological order

        // Reduce indegree for all the neighbors of v
        for (i = 0; i < n; i++) {
            if (a[v][i] != 0) {  // If there's an edge from v to i
                indegree[i] = indegree[i] - 1;  // Reduce indegree of node i
                if (indegree[i] == 0) {  // If indegree of i becomes 0, push it to stack
                    stack[++top] = i;
                }
            }
        }
    }
}

// Main function
int main() {
    int i, j;
    
    // Input the number of nodes
    printf("Enter the number of nodes: ");
    scanf("%d", &n);
    
    // Input the adjacency matrix
    printf("Enter the adjacency matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &a[i][j]);
        }
    }
    
    // Compute indegrees
    computeIndegree(n, a);
    
    // Perform topological sort
    tps_SourceRemoval(n, a);
    
    // Output the topological order
    printf("Topological order:\n");
    for (i = 0; i < n; i++) {
        printf("%d ", t[i]);  
    }
    
    return 0;
}


O/p:

Enter the number of nodes: 5
Enter the adjacency matrix:
0 0 1 0 0
1 0 0 1 0
0 0 0 0 1
0 0 1 0 1
0 0 0 0 0
Topological order:
1 3 0 2 4
