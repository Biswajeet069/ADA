#include <stdio.h>

int max(int a, int b) {
    return (a > b) ? a : b;
}

int knapsack(int n, int W, int wt[], int val[]) {
    int K[n+1][W+1];
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0)
                K[i][w] = 0;
            else if (wt[i-1] <= w)
                K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]], K[i-1][w]);
            else
                K[i][w] = K[i-1][w];
        }
    }
    printf("\nOptimal solution:\n");
    for(int i=0;i<=n;i++){
        for(int j=0;j<=W;j++){
            printf("%d\t",K[i][j]);
        }
        printf("\n");
    }
    // Trace back to find the selected items
    int res = K[n][W];
    int w = W;
    printf("Selected items: ");
    for (int i = n; i > 0 && res > 0; i--) {
        if (res == K[i-1][w])                     If the value at K[i][w] is the same as the one in the row above, then the current item (i-1) was not chosen.Because including an item would have increased the value.
            continue; // Item not included
        else {
            // Item included
            printf("%d ", (i-1));
            res -= val[i-1];
            w -= wt[i-1];
        }
    }
    printf("\n");

    return K[n][W];
}

int main() {
    int n, W, wt[10], val[10];
    printf("Enter the number of items: ");
    scanf("%d", &n);
    printf("Enter the weights: ");
    for (int i = 0; i < n; i++)
        scanf("%d", &wt[i]);
    printf("Enter the values: ");
    for (int i = 0; i < n; i++)
        scanf("%d", &val[i]);
    printf("Enter the capacity of knapsack: ");
    scanf("%d", &W);

    int result = knapsack(n, W, wt, val);
    printf("Maximum value in knapsack = %d\n", result);
    return 0;
}


O/P:

Enter the number of items: 4
Enter the weights: 2 1 3 2
Enter the values: 12 10 20 15
Enter the capacity of knapsack: 5

Optimal solution:
0       0       0       0       0       0
0       0       12      12      12      12
0       10      12      22      22      22
0       10      12      22      30      32
0       10      15      25      30      37
Selected items: 3 1 0
Maximum value in knapsack = 37
