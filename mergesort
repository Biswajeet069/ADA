#include <stdio.h>

// Merge function to combine two sorted subarrays
void merge(int arr[], int leftArr[], int rightArr[], int leftSize, int rightSize) {
    int i = 0, j = 0, k = 0;

    while (i < leftSize && j < rightSize) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k++] = leftArr[i++];
        } else {
            arr[k++] = rightArr[j++];
        }
    }

    while (i < leftSize) {
        arr[k++] = leftArr[i++];
    }

    while (j < rightSize) {
        arr[k++] = rightArr[j++];
    }
}

// Merge Sort function
void mergeSort(int arr[], int size) {
    if (size < 2) return; // Base case: only one element

    int mid = size / 2;

    // Create left and right subarrays with fixed sizes
    int leftArr[mid]; 
    int rightArr[size - mid];

    // Copy data to left and right subarrays
    for (int i = 0; i < mid; i++)
        leftArr[i] = arr[i];
    for (int i = mid; i < size; i++)
        rightArr[i - mid] = arr[i];

    // Recursively sort both halves
    mergeSort(leftArr, mid);
    mergeSort(rightArr, size - mid);

    // Merge the sorted halves
    merge(arr, leftArr, rightArr, mid, size - mid);
}

// Function to print the array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

// Driver code
int main() {
    int arr[] = {55, 28, 35, 78, 110, 48, 88};
    int size = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: ");
    printArray(arr, size);

    mergeSort(arr, size);

    printf("Sorted array: ");
    printArray(arr, size);

    return 0;
}


O/P:

Original array: 55 28 35 78 110 48 88 
Sorted array: 28 35 48 55 78 88 110 
